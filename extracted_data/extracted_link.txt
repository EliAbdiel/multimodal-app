[ ![Spring](./_/img/spring-logo.svg) ](https://spring.io)

Why Spring

[ Overview ](https://spring.io/why-spring) [ Microservices
](https://spring.io/microservices) [ Reactive ](https://spring.io/reactive) [
Event Driven ](https://spring.io/event-driven) [ Cloud
](https://spring.io/cloud) [ Web Applications ](https://spring.io/web-
applications) [ Serverless ](https://spring.io/serverless) [ Batch
](https://spring.io/batch)

Learn

[ Overview ](https://spring.io/learn) [ Quickstart
](https://spring.io/quickstart) [ Guides ](https://spring.io/guides) [ Blog
](https://spring.io/blog)

Projects

[ Overview ](https://spring.io/projects) [ Spring Boot
](https://spring.io/projects/spring-boot) [ Spring Framework
](https://spring.io/projects/spring-framework) [ Spring Cloud
](https://spring.io/projects/spring-cloud) [ Spring Cloud Data Flow
](https://spring.io/projects/spring-cloud-dataflow) [ Spring Data
](https://spring.io/projects/spring-data) [ Spring Integration
](https://spring.io/projects/spring-integration) [ Spring Batch
](https://spring.io/projects/spring-batch) [ Spring Security
](https://spring.io/projects/spring-security) [ View all projects
](https://spring.io/projects)

* DEVELOPMENT TOOLS 
[ Spring Tools 4 ](https://spring.io/tools) [ Spring Initializr
](https://start.spring.io)

Academy

[ Courses ](https://spring.academy/courses) [ Get Certified
](https://spring.academy/learning-path)

Solutions

[ Overview ](https://spring.io/solutions) [ Spring Runtime
](https://spring.io/support) [ Spring Consulting
](https://spring.io/consulting) [ Spring Academy For Teams
](https://spring.academy/teams) [ Security Advisories
](https://spring.io/security)

Community

[ Overview ](https://spring.io/community) [ Events ](https://spring.io/events)
[ Team ](https://spring.io/team)

light

Spring AI  1.0.0

Search

  *     * [ Overview ](index.html)
      * [ AI Concepts ](concepts.html)
    * [ Getting Started ](getting-started.html)
    * Reference 
      * [ Chat Client API ](api/chatclient.html)
        * [ Advisors ](api/advisors.html)
      * [ Prompts ](api/prompt.html)
      * [ Structured Output ](api/structured-output-converter.html)
      * [ Multimodality ](api/multimodality.html)
      * [ Models ](api/index.html)
        * [ Chat Models ](api/chatmodel.html)
          * [ Chat Models Comparison ](api/chat/comparison.html)
          * [ Amazon Bedrock Converse ](api/chat/bedrock-converse.html)
          * [ Anthropic 3 ](api/chat/anthropic-chat.html)
          * [ Azure OpenAI ](api/chat/azure-openai-chat.html)
          * [ DeepSeek ](api/chat/deepseek-chat.html)
          * [ Docker Model Runner ](api/chat/dmr-chat.html)
          * [ Google VertexAI ](api/chat/google-vertexai.html)
            * [ VertexAI Gemini ](api/chat/vertexai-gemini-chat.html)
          * [ Groq ](api/chat/groq-chat.html)
          * [ Hugging Face ](api/chat/huggingface.html)
          * [ Mistral AI ](api/chat/mistralai-chat.html)
          * [ MiniMax ](api/chat/minimax-chat.html)
          * [ Moonshot AI ](api/chat/moonshot-chat.html)
          * [ NVIDIA ](api/chat/nvidia-chat.html)
          * [ Ollama ](api/chat/ollama-chat.html)
          * [ Perplexity AI ](api/chat/perplexity-chat.html)
          * OCI Generative AI 
            * [ Cohere ](api/chat/oci-genai/cohere-chat.html)
          * [ OpenAI ](api/chat/openai-chat.html)
          * [ QianFan ](api/chat/qianfan-chat.html)
          * [ ZhiPu AI ](api/chat/zhipuai-chat.html)
        * [ Embedding Models ](api/embeddings.html)
          * [ Amazon Bedrock ](api/bedrock.html)
            * [ Cohere ](api/embeddings/bedrock-cohere-embedding.html)
            * [ Titan ](api/embeddings/bedrock-titan-embedding.html)
          * [ Azure OpenAI ](api/embeddings/azure-openai-embeddings.html)
          * [ Mistral AI ](api/embeddings/mistralai-embeddings.html)
          * [ MiniMax ](api/embeddings/minimax-embeddings.html)
          * [ OCI GenAI ](api/embeddings/oci-genai-embeddings.html)
          * [ Ollama ](api/embeddings/ollama-embeddings.html)
          * [ (ONNX) Transformers ](api/embeddings/onnx.html)
          * [ OpenAI ](api/embeddings/openai-embeddings.html)
          * [ PostgresML ](api/embeddings/postgresml-embeddings.html)
          * [ QianFan ](api/embeddings/qianfan-embeddings.html)
          * VertexAI 
            * [ Text Embedding ](api/embeddings/vertexai-embeddings-text.html)
            * [ Multimodal Embedding ](api/embeddings/vertexai-embeddings-multimodal.html)
          * [ ZhiPu AI ](api/embeddings/zhipuai-embeddings.html)
        * [ Image Models ](api/imageclient.html)
          * [ Azure OpenAI ](api/image/azure-openai-image.html)
          * [ OpenAI ](api/image/openai-image.html)
          * [ Stability ](api/image/stabilityai-image.html)
          * [ ZhiPuAI ](api/image/zhipuai-image.html)
          * [ QianFan ](api/image/qianfan-image.html)
        * Audio Models 
          * [ Transcription API ](api/audio/transcriptions.html)
            * [ Azure OpenAI ](api/audio/transcriptions/azure-openai-transcriptions.html)
            * [ OpenAI ](api/audio/transcriptions/openai-transcriptions.html)
          * [ Text-To-Speech (TTS) API ](api/audio/speech.html)
            * [ OpenAI ](api/audio/speech/openai-speech.html)
        * Moderation Models 
          * [ OpenAI ](api/moderation/openai-moderation.html)
          * [ Mistral AI ](api/moderation/mistral-ai-moderation.html)
      * [ Chat Memory ](api/chat-memory.html)
      * [ Tool Calling ](api/tools.html)
      * [ Model Context Protocol (MCP) ](api/mcp/mcp-overview.html)
        * [ MCP Client Boot Starters ](api/mcp/mcp-client-boot-starter-docs.html)
        * [ MCP Server Boot Starters ](api/mcp/mcp-server-boot-starter-docs.html)
        * [ MCP Utilities ](api/mcp/mcp-helpers.html)
      * [ Retrieval Augmented Generation (RAG) ](api/retrieval-augmented-generation.html)
        * [ ETL Pipeline ](api/etl-pipeline.html)
      * [ Model Evaluation ](api/testing.html)
      * [ Vector Databases ](api/vectordbs.html)
        * [ Azure AI Service ](api/vectordbs/azure.html)
        * [ Azure Cosmos DB ](api/vectordbs/azure-cosmos-db.html)
        * [ Apache Cassandra Vector Store ](api/vectordbs/apache-cassandra.html)
        * [ Chroma ](api/vectordbs/chroma.html)
        * [ Couchbase ](api/vectordbs/couchbase.html)
        * [ Elasticsearch ](api/vectordbs/elasticsearch.html)
        * [ GemFire ](api/vectordbs/gemfire.html)
        * [ MariaDB Vector Store ](api/vectordbs/mariadb.html)
        * [ Milvus ](api/vectordbs/milvus.html)
        * [ MongoDB Atlas ](api/vectordbs/mongodb.html)
        * [ Neo4j ](api/vectordbs/neo4j.html)
        * [ OpenSearch ](api/vectordbs/opensearch.html)
        * [ Oracle ](api/vectordbs/oracle.html)
        * [ PGvector ](api/vectordbs/pgvector.html)
        * [ Pinecone ](api/vectordbs/pinecone.html)
        * [ Qdrant ](api/vectordbs/qdrant.html)
        * [ Redis ](api/vectordbs/redis.html)
        * [ SAP Hana ](api/vectordbs/hana.html)
        * [ Typesense ](api/vectordbs/typesense.html)
        * [ Weaviate ](api/vectordbs/weaviate.html)
      * [ Observability ](observability/index.html)
      * [ Development-time Services ](api/docker-compose.html)
      * Testing 
        * [ Testcontainers ](api/testcontainers.html)
    * Guides 
      * [ Awesome Spring AI ](https://github.com/spring-ai-community/awesome-spring-ai)
      * [ Prompt Engineering Patterns ](api/chat/prompt-engineering-patterns.html)
      * [ Building Effective Agents ](api/effective-agents.html)
      * [ Deploying to the Cloud ](api/cloud-bindings.html)
  *     * [ Upgrade Notes ](upgrade-notes.html)
      * [ Migrating FunctionCallback to ToolCallback API ](api/tools-migration.html)

Search

[ Edit this Page ](https://github.com/spring-projects/spring-
ai/blob/v1.0.0/spring-ai-
docs/src/main/antora/modules/ROOT/pages/concepts.adoc) [ GitHub Project
](https://github.com/spring-projects/spring-ai "GitHub") [ Stack Overflow
](https://stackoverflow.com/questions/tagged/spring)

  * [ Spring AI ](index.html)
  * [ Overview ](index.html)
  * [ AI Concepts ](concepts.html)

#  AI Concepts

This section describes core concepts that Spring AI uses. We recommend reading
it closely to understand the ideas behind how Spring AI is implemented.

##  Models

AI models are algorithms designed to process and generate information, often
mimicking human cognitive functions. By learning patterns and insights from
large datasets, these models can make predictions, text, images, or other
outputs, enhancing various applications across industries.

There are many different types of AI models, each suited for a specific use
case. While ChatGPT and its generative AI capabilities have captivated users
through text input and output, many models and companies offer diverse inputs
and outputs. Before ChatGPT, many people were fascinated by text-to-image
generation models such as Midjourney and Stable Diffusion.

The following table categorizes several models based on their input and output
types:

![Model types](_images/spring-ai-concepts-model-types.jpg)

Spring AI currently supports models that process input and output as language,
image, and audio. The last row in the previous table, which accepts text as
input and outputs numbers, is more commonly known as embedding text and
represents the internal data structures used in an AI model. Spring AI has
support for embeddings to enable more advanced use cases.

What sets models like GPT apart is their pre-trained nature, as indicated by
the "P" in GPT—Chat Generative Pre-trained Transformer. This pre-training
feature transforms AI into a general developer tool that does not require an
extensive machine learning or model training background.

##  Prompts

Prompts serve as the foundation for the language-based inputs that guide an AI
model to produce specific outputs. For those familiar with ChatGPT, a prompt
might seem like merely the text entered into a dialog box that is sent to the
API. However, it encompasses much more than that. In many AI Models, the text
for the prompt is not just a simple string.

ChatGPT’s API has multiple text inputs within a prompt, with each text input
being assigned a role. For example, there is the system role, which tells the
model how to behave and sets the context for the interaction. There is also
the user role, which is typically the input from the user.

Crafting effective prompts is both an art and a science. ChatGPT was designed
for human conversations. This is quite a departure from using something like
SQL to "ask a question". One must communicate with the AI model akin to
conversing with another person.

Such is the importance of this interaction style that the term "Prompt
Engineering" has emerged as its own discipline. There is a burgeoning
collection of techniques that improve the effectiveness of prompts. Investing
time in crafting a prompt can drastically improve the resulting output.

Sharing prompts has become a communal practice, and there is active academic
research being done on this subject. As an example of how counter-intuitive it
can be to create an effective prompt (for example, contrasting with SQL), a [
recent research paper ](https://arxiv.org/abs/2205.11916) found that one of
the most effective prompts you can use starts with the phrase, “Take a deep
breath and work on this step by step.” That should give you an indication of
why language is so important. We do not yet fully understand how to make the
most effective use of previous iterations of this technology, such as ChatGPT
3.5, let alone new versions that are being developed.

###  Prompt Templates

Creating effective prompts involves establishing the context of the request
and substituting parts of the request with values specific to the user’s
input.

This process uses traditional text-based template engines for prompt creation
and management. Spring AI employs the OSS library [ StringTemplate
](https://www.stringtemplate.org/) for this purpose.

For instance, consider the simple prompt template:

    
    
    Tell me a {adjective} joke about {content}.

In Spring AI, prompt templates can be likened to the "View" in Spring MVC
architecture. A model object, typically a ` java.util.Map ` , is provided to
populate placeholders within the template. The "rendered" string becomes the
content of the prompt supplied to the AI model.

There is considerable variability in the specific data format of the prompt
sent to the model. Initially starting as simple strings, prompts have evolved
to include multiple messages, where each string in each message represents a
distinct role for the model.

##  Embeddings

Embeddings are numerical representations of text, images, or videos that
capture relationships between inputs.

Embeddings work by converting text, image, and video into arrays of floating
point numbers, called vectors. These vectors are designed to capture the
meaning of the text, images, and videos. The length of the embedding array is
called the vector’s dimensionality.

By calculating the numerical distance between the vector representations of
two pieces of text, an application can determine the similarity between the
objects used to generate the embedding vectors.

![Embeddings](_images/spring-ai-embeddings.jpg)

As a Java developer exploring AI, it’s not necessary to comprehend the
intricate mathematical theories or the specific implementations behind these
vector representations. A basic understanding of their role and function
within AI systems suffices, particularly when you’re integrating AI
functionalities into your applications.

Embeddings are particularly relevant in practical applications like the
Retrieval Augmented Generation (RAG) pattern. They enable the representation
of data as points in a semantic space, which is akin to the 2-D space of
Euclidean geometry, but in higher dimensions. This means just like how points
on a plane in Euclidean geometry can be close or far based on their
coordinates, in a semantic space, the proximity of points reflects the
similarity in meaning. Sentences about similar topics are positioned closer in
this multi-dimensional space, much like points lying close to each other on a
graph. This proximity aids in tasks like text classification, semantic search,
and even product recommendations, as it allows the AI to discern and group
related concepts based on their "location" in this expanded semantic
landscape.

You can think of this semantic space as a vector.

##  Tokens

Tokens serve as the building blocks of how an AI model works. On input, models
convert words to tokens. On output, they convert tokens back to words.

In English, one token roughly corresponds to 75% of a word. For reference,
Shakespeare’s complete works, totaling around 900,000 words, translate to
approximately 1.2 million tokens.

![Tokens](_images/spring-ai-concepts-tokens.png)

Perhaps more important is that Tokens = Money. In the context of hosted AI
models, your charges are determined by the number of tokens used. Both input
and output contribute to the overall token count.

Also, models are subject to token limits, which restrict the amount of text
processed in a single API call. This threshold is often referred to as the
"context window". The model does not process any text that exceeds this limit.

For instance, ChatGPT3 has a 4K token limit, while GPT4 offers varying
options, such as 8K, 16K, and 32K. Anthropic’s Claude AI model features a 100K
token limit, and Meta’s recent research yielded a 1M token limit model.

To summarize the collected works of Shakespeare with GPT4, you need to devise
software engineering strategies to chop up the data and present the data
within the model’s context window limits. The Spring AI project helps you with
this task.

##  Structured Output

The output of AI models traditionally arrives as a ` java.lang.String ` , even
if you ask for the reply to be in JSON. It may be a correct JSON, but it is
not a JSON data structure. It is just a string. Also, asking “for JSON” as
part of the prompt is not 100% accurate.

This intricacy has led to the emergence of a specialized field involving the
creation of prompts to yield the intended output, followed by converting the
resulting simple string into a usable data structure for application
integration.

![Structured Output Converter Architecture](_images/structured-output-
architecture.jpg)

The [ Structured output conversion ](api/structured-output-
converter.html#_structuredoutputconverter) employs meticulously crafted
prompts, often necessitating multiple interactions with the model to achieve
the desired formatting.

##  Bringing Your Data & APIs to the AI Model

How can you equip the AI model with information on which it has not been
trained?

Note that the GPT 3.5/4.0 dataset extends only until September 2021.
Consequently, the model says that it does not know the answer to questions
that require knowledge beyond that date. An interesting bit of trivia is that
this dataset is around 650GB.

Three techniques exist for customizing the AI model to incorporate your data:

  * **Fine Tuning** : This traditional machine learning technique involves tailoring the model and changing its internal weighting. However, it is a challenging process for machine learning experts and extremely resource-intensive for models like GPT due to their size. Additionally, some models might not offer this option. 

  * **Prompt Stuffing** : A more practical alternative involves embedding your data within the prompt provided to the model. Given a model’s token limits, techniques are required to present relevant data within the model’s context window. This approach is colloquially referred to as “stuffing the prompt.” The Spring AI library helps you implement solutions based on the “stuffing the prompt” technique otherwise known as  Retrieval Augmented Generation (RAG)  . 

![Prompt stuffing](_images/spring-ai-prompt-stuffing.jpg)

  * ** Tool Calling  ** : This technique allows registering tools (user-defined services) that connect the large language models to the APIs of external systems. Spring AI greatly simplifies code you need to write to support [ tool calling ](api/tools.html) . 

###  Retrieval Augmented Generation

A technique termed Retrieval Augmented Generation (RAG) has emerged to address
the challenge of incorporating relevant data into prompts for accurate AI
model responses.

The approach involves a batch processing style programming model, where the
job reads unstructured data from your documents, transforms it, and then
writes it into a vector database. At a high level, this is an ETL (Extract,
Transform and Load) pipeline. The vector database is used in the retrieval
part of RAG technique.

As part of loading the unstructured data into the vector database, one of the
most important transformations is to split the original document into smaller
pieces. The procedure of splitting the original document into smaller pieces
has two important steps:

  1. Split the document into parts while preserving the semantic boundaries of the content. For example, for a document with paragraphs and tables, one should avoid splitting the document in the middle of a paragraph or table. For code, avoid splitting the code in the middle of a method’s implementation. 

  2. Split the document’s parts further into parts whose size is a small percentage of the AI Model’s token limit. 

The next phase in RAG is processing user input. When a user’s question is to
be answered by an AI model, the question and all the “similar” document pieces
are placed into the prompt that is sent to the AI model. This is the reason to
use a vector database. It is very good at finding similar content.

![Spring AI RAG](_images/spring-ai-rag.jpg)

  * The [ ETL Pipeline ](api/etl-pipeline.html) provides further information about orchestrating the flow of extracting data from data sources and storing it in a structured vector store, ensuring data is in the optimal format for retrieval when passing it to the AI model. 

  * The [ ChatClient - RAG ](api/chatclient.html#_retrieval_augmented_generation) explains how to use the ` QuestionAnswerAdvisor ` to enable the RAG capability in your application. 

###  Tool Calling

Large Language Models (LLMs) are frozen after training, leading to stale
knowledge, and they are unable to access or modify external data.

The [ Tool Calling ](api/tools.html) mechanism addresses these shortcomings.
It allows you to register your own services as tools to connect the large
language models to the APIs of external systems. These systems can provide
LLMs with real-time data and perform data processing actions on their behalf.

Spring AI greatly simplifies code you need to write to support tool
invocation. It handles the tool invocation conversation for you. You can
provide your tool as a ` @Tool ` -annotated method and provide it in your
prompt options to make it available to the model. Additionally, you can define
and reference multiple tools in a single prompt.

![The main sequence of actions for tool calling](_images/tools/tool-
calling-01.jpg)

  1. When we want to make a tool available to the model, we include its definition in the chat request. Each tool definition comprises of a name, a description, and the schema of the input parameters. 

  2. When the model decides to call a tool, it sends a response with the tool name and the input parameters modeled after the defined schema. 

  3. The application is responsible for using the tool name to identify and execute the tool with the provided input parameters. 

  4. The result of the tool call is processed by the application. 

  5. The application sends the tool call result back to the model. 

  6. The model generates the final response using the tool call result as additional context. 

Follow the [ Tool Calling ](api/tools.html) documentation for further
information on how to use this feature with different AI models.

##  Evaluating AI responses

Effectively evaluating the output of an AI system in response to user requests
is very important to ensuring the accuracy and usefulness of the final
application. Several emerging techniques enable the use of the pre-trained
model itself for this purpose.

This evaluation process involves analyzing whether the generated response
aligns with the user’s intent and the context of the query. Metrics such as
relevance, coherence, and factual correctness are used to gauge the quality of
the AI-generated response.

One approach involves presenting both the user’s request and the AI model’s
response to the model, querying whether the response aligns with the provided
data.

Furthermore, leveraging the information stored in the vector database as
supplementary data can enhance the evaluation process, aiding in the
determination of response relevance.

The Spring AI project provides an ` Evaluator ` API which currently gives
access to basic strategies to evaluate model responses. Follow the [
Evaluation Testing ](api/testing.html) documentation for further information.

[ Overview ](index.html) [ Getting Started ](getting-started.html)

  * [ Spring AI ](index.html)

Stable

    * [ 1.0.0 ](index.html)

Snapshot

    * [ 1.1.0-SNAPSHOT ](1.1-SNAPSHOT/index.html)

  * Related Spring Documentation 
    * [ Spring Boot ](https://docs.spring.io/spring-boot/)
    * [ Spring Framework ](https://docs.spring.io/spring-framework/reference/)
    * __ Spring Cloud 
      * [ Spring Cloud Build ](https://docs.spring.io/spring-cloud-build/reference/)
      * [ Spring Cloud Bus ](https://docs.spring.io/spring-cloud-bus/reference/)
      * [ Spring Cloud Circuit Breaker ](https://docs.spring.io/spring-cloud-circuitbreaker/reference/)
      * [ Spring Cloud Commons ](https://docs.spring.io/spring-cloud-commons/reference/)
      * [ Spring Cloud Config ](https://docs.spring.io/spring-cloud-config/reference/)
      * [ Spring Cloud Consul ](https://docs.spring.io/spring-cloud-consul/reference/)
      * [ Spring Cloud Contract ](https://docs.spring.io/spring-cloud-contract/reference/)
      * [ Spring Cloud Function ](https://docs.spring.io/spring-cloud-function/reference/)
      * [ Spring Cloud Gateway ](https://docs.spring.io/spring-cloud-gateway/reference/)
      * [ Spring Cloud Kubernetes ](https://docs.spring.io/spring-cloud-kubernetes/reference/)
      * [ Spring Cloud Netflix ](https://docs.spring.io/spring-cloud-netflix/reference/)
      * [ Spring Cloud OpenFeign ](https://docs.spring.io/spring-cloud-openfeign/reference/)
      * [ Spring Cloud Stream ](https://docs.spring.io/spring-cloud-stream/reference/)
      * [ Spring Cloud Task ](https://docs.spring.io/spring-cloud-task/reference/)
      * [ Spring Cloud Vault ](https://docs.spring.io/spring-cloud-vault/reference/)
      * [ Spring Cloud Zookeeper ](https://docs.spring.io/spring-cloud-zookeeper/reference/)
    * __ Spring Data 
      * [ Spring Data Cassandra ](https://docs.spring.io/spring-data/cassandra/reference/)
      * [ Spring Data Commons ](https://docs.spring.io/spring-data/commons/reference/)
      * [ Spring Data Couchbase ](https://docs.spring.io/spring-data/couchbase/reference/)
      * [ Spring Data Elasticsearch ](https://docs.spring.io/spring-data/elasticsearch/reference/)
      * [ Spring Data JPA ](https://docs.spring.io/spring-data/jpa/reference/)
      * [ Spring Data KeyValue ](https://docs.spring.io/spring-data/keyvalue/reference/)
      * [ Spring Data LDAP ](https://docs.spring.io/spring-data/ldap/reference/)
      * [ Spring Data MongoDB ](https://docs.spring.io/spring-data/mongodb/reference/)
      * [ Spring Data Neo4j ](https://docs.spring.io/spring-data/neo4j/reference/)
      * [ Spring Data Redis ](https://docs.spring.io/spring-data/redis/reference/)
      * [ Spring Data JDBC & R2DBC ](https://docs.spring.io/spring-data/relational/reference/)
      * [ Spring Data REST ](https://docs.spring.io/spring-data/rest/reference/)
    * [ Spring Integration ](https://docs.spring.io/spring-integration/reference/)
    * [ Spring Batch ](https://docs.spring.io/spring-batch/reference/)
    * __ [ Spring Security ](https://docs.spring.io/spring-security/reference/)
      * [ Spring Authorization Server ](https://docs.spring.io/spring-authorization-server/reference/)
      * [ Spring LDAP ](https://docs.spring.io/spring-ldap/reference/)
      * [ Spring Security Kerberos ](https://docs.spring.io/spring-security-kerberos/reference/)
      * [ Spring Session ](https://docs.spring.io/spring-session/reference/)
      * [ Spring Vault ](https://docs.spring.io/spring-vault/reference/)
    * [ Spring AI ](https://docs.spring.io/spring-ai/reference/)
    * [ Spring AMQP ](https://docs.spring.io/spring-amqp/reference/)
    * [ Spring CLI ](https://docs.spring.io/spring-cli/reference/)
    * [ Spring GraphQL ](https://docs.spring.io/spring-graphql/reference/)
    * [ Spring for Apache Kafka ](https://docs.spring.io/spring-kafka/reference/)
    * [ Spring Modulith ](https://docs.spring.io/spring-modulith/reference/)
    * [ Spring for Apache Pulsar ](https://docs.spring.io/spring-pulsar/reference/)
    * [ Spring Shell ](https://docs.spring.io/spring-shell/reference/)
[ All Docs... ](spring-projects.html)

![Spring](./_/img/spring-logo.svg)

Copyright © 2005 -  Broadcom. All Rights Reserved. The term "Broadcom" refers
to Broadcom Inc. and/or its subsidiaries.  
[ Terms of Use ](https://www.vmware.com/help/legal.html) • [ Privacy
](https://www.vmware.com/help/privacy.html) • [ Trademark Guidelines
](https://spring.io/trademarks) • [ Thank you ](https://spring.io/thank-you) •
[ Your California Privacy Rights
](https://www.vmware.com/help/privacy/california-privacy-rights.html) •
Cookie Settings

Apache®, Apache Tomcat®, Apache Kafka®, Apache Cassandra™, and Apache Geode™
are trademarks or registered trademarks of the Apache Software Foundation in
the United States and/or other countries. Java™, Java™ SE, Java™ EE, and
OpenJDK™ are trademarks of Oracle and/or its affiliates. Kubernetes® is a
registered trademark of the Linux Foundation in the United States and other
countries. Linux® is the registered trademark of Linus Torvalds in the United
States and other countries. Windows® and Microsoft® Azure are registered
trademarks of Microsoft Corporation. “AWS” and “Amazon Web Services” are
trademarks or registered trademarks of Amazon.com Inc. or its affiliates. All
other trademarks and copyrights are property of their respective owners and
are only mentioned for informative purposes. Other names may be trademarks of
their respective owners.

[ ](https://www.youtube.com/user/SpringSourceDev "Youtube") [
](https://github.com/spring-projects "GitHub") [
](https://twitter.com/springcentral "Twitter")

[ Search in all Spring Docs ](search.html)

[ ![](./_/img/algolia-light.svg) ![](./_/img/algolia-dark.svg)
](https://www.algolia.com/)

